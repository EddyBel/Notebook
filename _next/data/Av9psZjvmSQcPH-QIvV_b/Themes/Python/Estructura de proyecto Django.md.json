{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    strong: \"strong\",\n    em: \"em\",\n    hr: \"hr\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Estructura de proyecto Django\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Como se estructura un proyecto en Django ?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Después de crear una base de proyecto en Django con sus respectivo comando, podremos ver una estructura como la siguiente.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"Mode                LastWriteTime         Length Name\\r\\n----                -------------         ------ ----\\r\\nd----     07/11/2022  08:56 a. m.                  Dev\\r\\nd----     07/11/2022  09:40 a. m.                  Proyecto\\r\\n-a---     07/11/2022  09:40 a. m.              0   db.sqlite3\\r\\n-a---     07/11/2022  09:06 a. m.            686   manage.py\\r\\n-a---     07/11/2022  09:17 a. m.             64   requeriments.txt\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Dev\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Esta carpeta hace referencia al \", _jsx(_components.em, {\n          children: \"entorno virtual\"\n        }), \" en el que estemos trabajando y tenemos instaladas las respectivas dependencias.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"Proyecto\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Es la carpeta del \", _jsx(_components.em, {\n          children: \"proyecto principal\"\n        }), \", En mi caso se llama \", _jsx(_components.em, {\n          children: \"Proyecto\"\n        }), \" pero esta adquirirá el nombre que le hayas dado a tu proyecto.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"db.sqlite3\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Este archivo es la \", _jsx(_components.em, {\n          children: \"base de dados\"\n        }), \" con la que podemos iniciar a trabajar, Normalmente este archivo se usa como \", _jsx(_components.em, {\n          children: \"base de datos de desarrollo\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"manage.py\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Este archivo es el script principal que se encargara de correr nuestra aplicación con sus respectivos comandos, nos permite ejecutar *comandos administrativos*.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"requeriments.txt\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Este es un simple archivo de texto plano que cuenta con las dependencias que vamos a utilizar en nuestro proyecto, se usa para poder replicar nuestro entorno de desarrollo con las \", _jsx(_components.em, {\n          children: \"dependencias exactas\"\n        }), \" que necesitamos para que funcione.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Estructura del proyecto principal\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dentro de la carpeta con el nombre del proyecto ( En nuestro caso “Proyecto” ) se encuentran los archivos principales de la aplicación .\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"Mode                LastWriteTime         Length Name\\r\\n----                -------------         ------ ----\\r\\n-a---     07/11/2022  09:06 a. m.              0   __init__.py\\r\\n-a---     07/11/2022  09:06 a. m.            409   asgi.py\\r\\n-a---     07/11/2022  09:06 a. m.           3350   settings.py\\r\\n-a---     07/11/2022  09:06 a. m.            771   urls.py\\r\\n-a---     07/11/2022  09:06 a. m.            409   wsgi.py\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"init.py\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Este archivo no es tan importante ya que define si el proyecto es un modulo.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.strong, {\n          children: \"settings.py\"\n        }), \"\\r\\nEste archivo es el mas importante de la aplicación debido a que guarda la \", _jsx(_components.em, {\n          children: \"configuración del proyecto\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"urls.py\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Define que \", _jsx(_components.em, {\n          children: \"rutas\"\n        }), \" pueden ser accedidas por el usuario. Por ejemplo si queremos una ruta “/Home” o “/Login” se definirá en este archivo.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"asgi.py & wsgi.py\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Estos archivos definen la configuración de la *aplicación para producción*, debido a que Django es un framework de desarrollo y no de producción, utiliza módulos externos para poder servir esa aplicación y estos archivos se encargan de esa configuración.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Construcción de un proyecto en Django.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"La forma en la que Django trabaja es separando las partes del proyecto. A cada parte Django le llama aplicación.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Esto seria que cuando creamos un proyecto en Django, este contiene sub proyectos llamados apps dentro del proyecto principal, esto nos permite desarrollar cada parte de manera independiente y conectar o desconectar cada parte del proyecto si así lo necesitamos.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"./Como%20crear%20un%20proyecto%20en%20Django%2070df833b8b424d0bbacd0b26e37fe751/Captura_de_pantalla_2022-11-07_092538.png\",\n        alt: \"Captura de pantalla_20221117_071825.png\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Django tiene un comando para crear una app de manera sencilla el cual es el siguiente.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"python manage.py startapp nombre_de_la_app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Por ejemplo:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"python manage.py startapp Home\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Este comando nos creara una app llamada Home. Esta carpeta o app aparecerá en nuestro carpeta de trabajo.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"Mode                LastWriteTime         Length Name\\r\\n----                -------------         ------ ----\\r\\nd----     07/11/2022  08:56 a. m.                  Dev\\r\\nd----     17/11/2022  07:26 p. m.                  Home\\r\\nd----     07/11/2022  09:40 a. m.                  Proyecto\\r\\n-a---     07/11/2022  09:40 a. m.              0   db.sqlite3\\r\\n-a---     07/11/2022  09:06 a. m.            686   manage.py\\r\\n-a---     07/11/2022  09:17 a. m.             64   requeriments.txt\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"NOTA\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"La carpeta principal en nuestro caso ( Proyecto ) es la encargada de gestionar las apps, esto significa que para poder utilizar una app debemos vincularla en nuestro proyecto principal ( Proyecto )\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Como se estructura una app ?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cuando creamos una app para el proyecto esta nos viene con sus respectivos archivos de configuración y desarrollo.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"Mode                LastWriteTime         Length Name\\r\\n----                -------------         ------ ----\\r\\nd----     17/11/2022  07:26 p. m.                  migrations\\r\\n-a---     17/11/2022  07:26 p. m.              0   __init__.py\\r\\n-a---     17/11/2022  07:26 p. m.             66   admin.py\\r\\n-a---     17/11/2022  07:26 p. m.            146   apps.py\\r\\n-a---     17/11/2022  07:26 p. m.             60   models.py\\r\\n-a---     17/11/2022  07:26 p. m.             63   tests.py\\r\\n-a---     17/11/2022  07:26 p. m.             66   views.py\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"migrations\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Esta carpeta contendrá los cambios que se harán a la base de datos. contiene un archivo bacio llamado \", _jsx(_components.strong, {\n          children: \"init\"\n        }), \".py.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"init.py\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Este archivo define si se comportara el proyecto como un modulo de python.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.strong, {\n          children: \"admin.py\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Este archivo es un panel de administrador, lo que nos permite es poder crear datos, usuarios o si el usuario tiene algún privilegio se definirá en este archivo.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"apps.py\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Es el archivo de configuración de la aplicación, es su equivalente al archivo settings del proyecto principal.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"models.py\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"En este archivo se pueden crear clases, y al final estas clases creadas se convertirán en tablas de SQL, de esto se encargara Django y las actualizaciones de esta base de datos se guardaran en la carpeta \", _jsx(_components.em, {\n          children: \"migrations.\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"tests.py\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Este archivo nos permite hacer testing de nuestra apps, nos permite poder verificar la lógica de nuestra app.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"views.py\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Este archivo es de los mas importantes debido a que ahí es donde se cargara lo que mostraremos en el navegador ( HTML ).\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontmatter":{"Blog":"No","Completado":"Yes","Dificultad":"⭐⭐","Etiquetas":"Backend, Django, Files, Folders, Framework, Proyect, Python","Fecha":"November 17, 2022","Fuentes":"https://www.youtube.com/watch?v=T1intZyhXDU&t=1s"}},"__N_SSG":true}